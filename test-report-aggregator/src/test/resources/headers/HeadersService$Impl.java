import io.github.zskamljic.restahead.adapter.DefaultAdapters;
import io.github.zskamljic.restahead.client.Client;
import io.github.zskamljic.restahead.client.requests.Request;
import io.github.zskamljic.restahead.client.requests.Verb;
import io.github.zskamljic.restahead.exceptions.RestException;
import java.lang.InterruptedException;
import java.lang.Override;
import java.lang.String;
import java.util.concurrent.ExecutionException;
import javax.annotation.processing.Generated;

@Generated("Generated by RestAhead")
public final class HeadersService$Impl implements HeadersService {
    private final String baseUrl;

    private final Client client;

    private final DefaultAdapters defaultAdapters;

    public HeadersService$Impl(String baseUrl, Client client, DefaultAdapters defaultAdapters) {
        this.baseUrl = baseUrl;
        this.client = client;
        this.defaultAdapters = defaultAdapters;
    }

    @Override
    public final void performGet() {
        var httpRequestBuilder = new Request.Builder()
            .setVerb(Verb.GET)
            .setBaseUrl(baseUrl)
            .setPath("");
        httpRequestBuilder.addHeader("Authorization", "none");
        var response = client.execute(httpRequestBuilder.build());
        try {
            defaultAdapters.syncVoidAdapter(response);
        } catch (ExecutionException | InterruptedException exception) {
            throw RestException.getAppropriateException(exception);
        }
    }

    @Override
    public final void performGetMultipleValues() {
        var httpRequestBuilder = new Request.Builder()
            .setVerb(Verb.GET)
            .setBaseUrl(baseUrl)
            .setPath("");
        httpRequestBuilder.addHeader("Authorization", "none");
        httpRequestBuilder.addHeader("Authorization", "some");
        httpRequestBuilder.addHeader("Test", "value");
        var response = client.execute(httpRequestBuilder.build());
        try {
            defaultAdapters.syncVoidAdapter(response);
        } catch (ExecutionException | InterruptedException exception) {
            throw RestException.getAppropriateException(exception);
        }
    }
}