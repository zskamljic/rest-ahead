package io.github.zskamljic.restahead.demo;

import io.github.zskamljic.restahead.adapter.DefaultAdapters;
import io.github.zskamljic.restahead.client.Client;
import io.github.zskamljic.restahead.client.requests.Request;
import io.github.zskamljic.restahead.client.requests.Verb;
import io.github.zskamljic.restahead.conversion.Converter;
import io.github.zskamljic.restahead.exceptions.RequestFailedException;
import io.github.zskamljic.restahead.exceptions.RestException;
import java.io.IOException;
import java.lang.InterruptedException;
import java.lang.Override;
import java.lang.String;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import java.util.concurrent.ExecutionException;
import javax.annotation.processing.Generated;

@Generated("Generated by RestAhead")
public final class ServiceWithUnknownResponse$Impl implements ServiceWithUnknownResponse {
    private final String baseUrl;

    private final Client client;

    private final Converter converter;

    private final DefaultAdapters defaultAdapters;

    public ServiceWithUnknownResponse$Impl(String baseUrl, Client client, Converter converter,
                                           DefaultAdapters defaultAdapters) {
        this.baseUrl = baseUrl;
        this.client = client;
        this.converter = converter;
        this.defaultAdapters = defaultAdapters;
    }

    @Override
    public final ServiceWithUnknownResponse.TestResponse delete() {
        var httpRequestBuilder = new Request.Builder()
            .setVerb(Verb.DELETE)
            .setBaseUrl(baseUrl)
            .setPath("/delete");
        var response = client.execute(httpRequestBuilder.build());
        CompletableFuture<ServiceWithUnknownResponse.TestResponse> convertedResponse = response.thenApply(r -> {
            if (r.status() < 200 || r.status() >= 300) {
                throw new RequestFailedException(r.status(), r.body());
            }
            try {
                ServiceWithUnknownResponse.TestResponse deserializedResponse = converter.deserialize(r, ServiceWithUnknownResponse.TestResponse.class);
                return deserializedResponse;
            } catch (IOException exception) {
                throw new CompletionException(exception);
            }
        } );
        try {
            return defaultAdapters.syncAdapter(convertedResponse);
        } catch (ExecutionException | InterruptedException exception) {
            throw RestException.getAppropriateException(exception);
        }
    }
}