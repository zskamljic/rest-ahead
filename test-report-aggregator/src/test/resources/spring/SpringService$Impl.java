package restahead.spring;

import io.github.zskamljic.restahead.adapter.DefaultAdapters;
import io.github.zskamljic.restahead.client.Client;
import io.github.zskamljic.restahead.client.requests.MultiPartRequest;
import io.github.zskamljic.restahead.client.requests.Request;
import io.github.zskamljic.restahead.client.requests.Verb;
import io.github.zskamljic.restahead.client.requests.parts.FieldPart;
import io.github.zskamljic.restahead.client.requests.parts.FilePart;
import io.github.zskamljic.restahead.client.responses.Response;
import io.github.zskamljic.restahead.conversion.Converter;
import io.github.zskamljic.restahead.exceptions.RestException;
import java.io.IOException;
import java.lang.InterruptedException;
import java.lang.Override;
import java.lang.String;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import javax.annotation.processing.Generated;
import org.springframework.web.multipart.MultipartFile;

@Generated("Generated by RestAhead")
public final class SpringService$Impl implements SpringService {
    private final String baseUrl;

    private final Client client;

    private final Converter converter;

    private final DefaultAdapters defaultAdapters;

    public SpringService$Impl(String baseUrl, Client client, Converter converter,
                              DefaultAdapters defaultAdapters) {
        this.baseUrl = baseUrl;
        this.client = client;
        this.converter = converter;
        this.defaultAdapters = defaultAdapters;
    }

    @Override
    public final Response performDelete(String header1, String header2) {
        var httpRequestBuilder = new Request.Builder()
            .setVerb(Verb.DELETE)
            .setBaseUrl(baseUrl)
            .setPath("/delete");
        httpRequestBuilder.addHeader("custom", String.valueOf(header1));
        httpRequestBuilder.addHeader("header2", String.valueOf(header2));
        var response = client.execute(httpRequestBuilder.build());
        try {
            return defaultAdapters.syncAdapter(response);
        } catch (ExecutionException | InterruptedException exception) {
            throw RestException.getAppropriateException(exception);
        }
    }

    @Override
    public final Response performGet(String get, String second) {
        var httpRequestBuilder = new Request.Builder()
            .setVerb(Verb.GET)
            .setBaseUrl(baseUrl)
            .setPath("/{get}/{hello}".replace("{get}", String.valueOf(get))
                .replace("{hello}", String.valueOf(second)));
        var response = client.execute(httpRequestBuilder.build());
        try {
            return defaultAdapters.syncAdapter(response);
        } catch (ExecutionException | InterruptedException exception) {
            throw RestException.getAppropriateException(exception);
        }
    }

    @Override
    public final Response performPatch(Map<String, String> body) {
        var httpRequestBuilder = new Request.Builder()
            .setVerb(Verb.PATCH)
            .setBaseUrl(baseUrl)
            .setPath("/patch");
        try {
            httpRequestBuilder.setBody(converter.serialize(body));
        } catch (IOException exception) {
            throw RestException.getAppropriateException(exception);
        }
        var response = client.execute(httpRequestBuilder.build());
        try {
            return defaultAdapters.syncAdapter(response);
        } catch (ExecutionException | InterruptedException exception) {
            throw RestException.getAppropriateException(exception);
        }
    }

    @Override
    public final Response performPost(String part, MultipartFile file) {
        var httpRequestBuilder = new Request.Builder()
            .setVerb(Verb.POST)
            .setBaseUrl(baseUrl)
            .setPath("/post");
        try {
            MultiPartRequest.builder()
                .addPart(new FieldPart("part", part))
                .addPart(new FilePart("file", file.getOriginalFilename(), file.getInputStream()))
                .buildInto(httpRequestBuilder);
        } catch (IOException exception) {
            throw RestException.getAppropriateException(exception);
        }
        var response = client.execute(httpRequestBuilder.build());
        try {
            return defaultAdapters.syncAdapter(response);
        } catch (ExecutionException | InterruptedException exception) {
            throw RestException.getAppropriateException(exception);
        }
    }

    @Override
    public final Response performPut() {
        var httpRequestBuilder = new Request.Builder()
            .setVerb(Verb.PUT)
            .setBaseUrl(baseUrl)
            .setPath("/put");
        var response = client.execute(httpRequestBuilder.build());
        try {
            return defaultAdapters.syncAdapter(response);
        } catch (ExecutionException | InterruptedException exception) {
            throw RestException.getAppropriateException(exception);
        }
    }

    @Override
    public final Response customGet() {
        var httpRequestBuilder = new Request.Builder()
            .setVerb(Verb.GET)
            .setBaseUrl(baseUrl)
            .setPath("/get");
        var response = client.execute(httpRequestBuilder.build());
        try {
            return defaultAdapters.syncAdapter(response);
        } catch (ExecutionException | InterruptedException exception) {
            throw RestException.getAppropriateException(exception);
        }
    }
}