package io.github.zskamljic.restahead.demo;

import io.github.zskamljic.restahead.adapter.DefaultAdapters;
import io.github.zskamljic.restahead.client.Client;
import io.github.zskamljic.restahead.client.requests.Request;
import io.github.zskamljic.restahead.client.requests.Verb;
import io.github.zskamljic.restahead.client.responses.Response;
import io.github.zskamljic.restahead.conversion.Converter;
import io.github.zskamljic.restahead.conversion.OptionsConverter;
import io.github.zskamljic.restahead.exceptions.RestException;
import java.lang.InterruptedException;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import javax.annotation.processing.Generated;

@Generated("Generated by RestAhead")
public final class OptionsService$Impl implements OptionsService {
    private final String baseUrl;

    private final Client client;

    private final Converter converter;

    private final DefaultAdapters defaultAdapters;

    public OptionsService$Impl(String baseUrl, Client client, Converter converter,
                               DefaultAdapters defaultAdapters) {
        this.baseUrl = baseUrl;
        this.client = client;
        this.converter = converter;
        this.defaultAdapters = defaultAdapters;
    }

    @Override
    public final void options() {
        var httpRequestBuilder = new Request.Builder()
            .setVerb(Verb.OPTIONS)
            .setBaseUrl(baseUrl)
            .setPath("");
        var response = client.execute(httpRequestBuilder.build());
        try {
            defaultAdapters.syncVoidAdapter(response);
        } catch (ExecutionException | InterruptedException exception) {
            throw RestException.getAppropriateException(exception);
        }
    }

    @Override
    public final List<Verb> options2() {
        var httpRequestBuilder = new Request.Builder()
            .setVerb(Verb.OPTIONS)
            .setBaseUrl(baseUrl)
            .setPath("");
        var response = client.execute(httpRequestBuilder.build());
        CompletableFuture<List<Verb>> convertedResponse = response.thenApply(r -> {
            return OptionsConverter.parseOptions(r);
        } );
        try {
            return defaultAdapters.syncAdapter(convertedResponse);
        } catch (ExecutionException | InterruptedException exception) {
            throw RestException.getAppropriateException(exception);
        }
    }

    @Override
    public final Response options3() {
        var httpRequestBuilder = new Request.Builder()
            .setVerb(Verb.OPTIONS)
            .setBaseUrl(baseUrl)
            .setPath("");
        var response = client.execute(httpRequestBuilder.build());
        try {
            return defaultAdapters.syncAdapter(response);
        } catch (ExecutionException | InterruptedException exception) {
            throw RestException.getAppropriateException(exception);
        }
    }
}